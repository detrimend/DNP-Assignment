@page "/create-user"
@using ApiContracts
@using BlazorApp.Services
@attribute [StreamRendering]

<PageTitle>Create User</PageTitle>

<h1>Create User</h1>

<p>Fill in the details to create a new user.</p>

@if (isLoading)
{
    <p>
        <em>Creating user...</em>
    </p>
}
else
{
    <EditForm Model="userModel" OnValidSubmit="CreateUserAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control" @bind-Value="userModel.UserName" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="mt-3 alert alert-info">@message</div>
    }
}

@code {
    private CreateUserDto userModel = new() { UserName = string.Empty, Password = string.Empty };
    private bool isLoading = false;
    private string? message;

    [Inject]
    private IUserService UserService { get; set; } = default!;

    private async Task CreateUserAsync()
    {
        isLoading = true;
        message = null;
        try
        {
            var result = await UserService.AddAsync(userModel);
            message = $"User '{result.UserName}' created successfully!";
            userModel = new() { UserName = string.Empty, Password = string.Empty }; // Reset form
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
        isLoading = false;
    }
}